name: CI

on:
  schedule:
    - cron: "17 17 * * *"
  workflow_dispatch:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        bazel-version:
          - "6.*"
          - "7.*"
          - "8.*"
          - "rolling"
        include:
          - bazel-version: "rolling"
            canfail: "https://github.com/bazelbuild/bazel/issues/26579"
          - bazel-version: "7.*"
            artifact: "unused-deps"
          - bazel-version: "6.*"
            canfail: "WORKSPACE support required for 6.*"
    continue-on-error: ${{ !!matrix.canfail }}
    env:
      USE_BAZEL_VERSION: ${{ matrix.bazel-version }}
    steps:
      - uses: actions/checkout@v2
      - uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}-${{ matrix.bazel-version }}
          repository-cache: true
      - run: |
          bazel test ...
          bazel test ... --incompatible_no_implicit_file_export
      - working-directory: e2e/smoke
        run: |
          bazel test ...
          bazel test --test_output errors binary-with-unused-compile-time-dep-unused-deps-test | grep 'remove deps'
          bazel test --test_output errors library-with-two-unused-compile-time-deps-unused-deps-test | grep 'remove deps'
          bazel test --test_output errors library-with-unused-compile-time-dep-unused-deps-test | grep 'remove deps'
      - id: binary
        run: |
          bazel build :unused-deps_deploy.jar
          echo "bin=$(bazel cquery --output files :unused-deps_deploy.jar)" >> ${GITHUB_OUTPUT}
      - uses: actions/upload-artifact@v4
        if: !!matrix.artifact
        with:
          name: ${{ matrix.artifact }}
          path: ${{ steps.binary.outputs.bin }}
  release:
    needs: test
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - id: integrity
        run: |
          echo "ver=${GITHUB_REF_NAME#v}" >> ${GITHUB_ENV}
          sri="$(curl -sSfL ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/archive/refs/tags/${GITHUB_REF_NAME}.tar.gz |
              openssl dgst -sha256 -binary |
              openssl base64 -A)"
          echo "sri=sha256-${sri}" >> ${GITHUB_ENV}
          bin_sri="$(openssl dgst -sha256 -binary < ${{ steps.binary.outputs.bin }} |
              openssl base64 -A)"
          echo "bin_sri=sha256-${bin_sri}" >> ${GITHUB_ENV}
      - run: |
          gh release create ${GITHUB_REF_NAME} -F <(envsubst < NOTES.md) ${{ steps.binary.outputs.bin }}
        env:
          GH_TOKEN: ${{ github.token }}
